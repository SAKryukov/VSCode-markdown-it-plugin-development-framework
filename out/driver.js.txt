const path = require("path");
const fs = require("fs");

const Utf8BOM = "\ufeff";

const debugConfiguration = %s;

const constructor = require("%s");
const md = new constructor();
debugConfiguration.markdownItOptions.xhtmlOut = true;
md.set(debugConfiguration.markdownItOptions);

const rootPath = "%s";

const plugins = debugConfiguration.plugins;
for (let index in plugins) {
    if (!plugins[index].enabled) continue;
    try {
        const pluginPath = path.join(rootPath, plugins[index].path);
        const plugin = require(pluginPath);
        md.use(plugin, plugins[index].options);
    } catch (ex) {
        console.log(ex.toString());
    } //exception
} //loop

const last = { content: undefined, fileName: undefined }; 

for (let index in debugConfiguration.testDataSet) {
    const inputFileName = path.join(rootPath, debugConfiguration.testDataSet[index]);
    let result = md.render(fs.readFileSync(inputFileName, 'utf8'));
    if (debugConfiguration.debugSessionOptions.saveHtmlFiles) {
        // const effectiveOutputPath = outputPath ?
        //     path.join(vscode.workspace.rootPath, outputPath) : path.dirname(fileName);
        const effectiveOutputPath = path.dirname(inputFileName);
        result = Utf8BOM + result;
        const output = path.join(
            effectiveOutputPath,
            path.basename(inputFileName,
                path.extname(inputFileName))) + ".html";
        fs.writeFileSync(output, result);
        last.content = result;
        last.fileName = output;
    } //if
} //loop

const callbackFileNames = {
    content: "%s",
    fileName: "%s"
};

if (last.content && last.fileName && debugConfiguration.debugSessionOptions.showLastHTML) {
    fs.writeFileSync(callbackFileNames.content, last.content);
    fs.writeFileSync(callbackFileNames.fileName, path.basename(last.fileName));
} //if

console.log("Debugging complete");
